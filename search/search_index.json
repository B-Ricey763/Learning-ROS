{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started ROS, or robot operating system, is quite confusing and daunting at first (at least it was for me). So I decided to document my experience here. Hope you Enjoy! ROS is not necessarily an operating system, it is a repository of packages that can be used together. You have to install a distribution to a Unix platform, in my case, Ubuntu. Go to ROS Setup and follow the instructions to install ROS.","title":"Getting Started"},{"location":"#getting-started","text":"ROS, or robot operating system, is quite confusing and daunting at first (at least it was for me). So I decided to document my experience here. Hope you Enjoy! ROS is not necessarily an operating system, it is a repository of packages that can be used together. You have to install a distribution to a Unix platform, in my case, Ubuntu. Go to ROS Setup and follow the instructions to install ROS.","title":"Getting Started"},{"location":"frcpi/","text":"Getting RPi to work with RoboRIO First, connect pi to OpenMesh Radio on the open USB port. Then, go to Advanced IP Scanner on the driver's station. Change the range of ip's at the top bar to 10.45.16.1-10.45.16.254 . Run the scan and find your hostname set previously. I don't know how to connect to the hostname just yet, so find the ip next to the name and use PuTTY to connect. You should be able to use SSH normally on the pi on the driver's station to get it work.","title":"RPi on RoboRIO network"},{"location":"frcpi/#getting-rpi-to-work-with-roborio","text":"First, connect pi to OpenMesh Radio on the open USB port. Then, go to Advanced IP Scanner on the driver's station. Change the range of ip's at the top bar to 10.45.16.1-10.45.16.254 . Run the scan and find your hostname set previously. I don't know how to connect to the hostname just yet, so find the ip next to the name and use PuTTY to connect. You should be able to use SSH normally on the pi on the driver's station to get it work.","title":"Getting RPi to work with RoboRIO"},{"location":"guiforwarding/","text":"SSH GUI Forwarding For this tutorial I'm using PuTTY since it is a lot easier to configure gui forwarding. First, install VcXsrv , which is the X11 forwarding server. Follow the instructions and launch it. The X icon should appear in the tray to show that it is running. Open Putty, go to Connection > SSH > X11 and enable X11 forwarding. That's it, as long as you haven't edited the .bashrc on the server (in my case, the pi). To test, install some gui apps: 1 sudo apt install x11-apps And then run one of the apps: 1 xcalc A nice little window with a calculator should appear Helpful Links: * This stack question Doesn't even help, here is another sorta good link: https://jack-kawell.com/2020/06/12/ros-wsl2/ and this if you have to use p has some good things although I never got found any pivotal data. * Tutorial to install WSL2 , although not exactly directly addressing the problem, has a good gui forwarding section. I used one of the commands, echo 'export DISPLAY=<your_ip_address>:0.0' >> ~/.bashrc . Don't know what else I used to get it to work. * How to fix F keys in Putty in case you have to use PuTTY instead of OpenSSH. * Ancient Forum Post that might help.","title":"SSH GUI Forwarding"},{"location":"guiforwarding/#ssh-gui-forwarding","text":"For this tutorial I'm using PuTTY since it is a lot easier to configure gui forwarding. First, install VcXsrv , which is the X11 forwarding server. Follow the instructions and launch it. The X icon should appear in the tray to show that it is running. Open Putty, go to Connection > SSH > X11 and enable X11 forwarding. That's it, as long as you haven't edited the .bashrc on the server (in my case, the pi). To test, install some gui apps: 1 sudo apt install x11-apps And then run one of the apps: 1 xcalc A nice little window with a calculator should appear Helpful Links: * This stack question Doesn't even help, here is another sorta good link: https://jack-kawell.com/2020/06/12/ros-wsl2/ and this if you have to use p has some good things although I never got found any pivotal data. * Tutorial to install WSL2 , although not exactly directly addressing the problem, has a good gui forwarding section. I used one of the commands, echo 'export DISPLAY=<your_ip_address>:0.0' >> ~/.bashrc . Don't know what else I used to get it to work. * How to fix F keys in Putty in case you have to use PuTTY instead of OpenSSH. * Ancient Forum Post that might help.","title":"SSH GUI Forwarding"},{"location":"links/","text":"Additional Resources Forwarding GUIs using X11 through OpenSSH session Useful ROS & Linux Commands GUI forwarding with X11 (basic) Useless repo, golden README with great commands RPLidar Tutorial & Setup Outdated but useful video on RPLidar and Hector SLAM using repo above How to install ROS on WSL2 How to install ROS packages ROS on WSL2 with Docker and Unity (for simulations) Networking with WSL2 Video More Networking with WSL2","title":"Further Reading"},{"location":"links/#additional-resources","text":"Forwarding GUIs using X11 through OpenSSH session Useful ROS & Linux Commands GUI forwarding with X11 (basic) Useless repo, golden README with great commands RPLidar Tutorial & Setup Outdated but useful video on RPLidar and Hector SLAM using repo above How to install ROS on WSL2 How to install ROS packages ROS on WSL2 with Docker and Unity (for simulations) Networking with WSL2 Video More Networking with WSL2","title":"Additional Resources"},{"location":"linuxcmds/","text":"Useful Ros & Linux Commands Lookup ROS packages 1 apt-cache search ros-noetic Installed ROS package Dependencies 1 sudo rosdep install <package> Creates a pdf of the transform_frame graph 1 rosrun tf2_tools view_frames.py To view it, run 1 evince frames.pdf","title":"Useful Commands"},{"location":"linuxcmds/#useful-ros-linux-commands","text":"Lookup ROS packages 1 apt-cache search ros-noetic Installed ROS package Dependencies 1 sudo rosdep install <package> Creates a pdf of the transform_frame graph 1 rosrun tf2_tools view_frames.py To view it, run 1 evince frames.pdf","title":"Useful Ros &amp; Linux Commands"},{"location":"rossetup/","text":"ROS Installation and Setup Materials Raspberry Pi 4 Sandisk microSD card (32 GB) microHDMI (A-M) Keyboard (and mouse, maybe) Ethernet for the Pi to facilitate the installation Installing the OS First, install the Raspberry Pi Imager . Open it and choose an OS, in my case Ubuntu Server 20.04. I'm using the server distro since in the final product we won't need a desktop or an guis for that matter. Make sure to choose the 64-bit distro. Before imaging, make sure your microSD is connected to your computer. Once ubuntu is installed, put the microSD into the Pi, plug in the ethernet (or use normal WiFi ). On your first boot, connect an HDMI and keyboard (no mouse needed) to access the command line. Once you are in, run sudo apt update and sudo apt upgrade to make sure everything is up to date and test your network connection. Once you see everything works, you need to set your static hostname so you don't have to connect with IP using ssh. 1 2 3 hostnamectl set-hostname <your_hostname> # ex hostnamectl set-hostname hello_world To verify everything works, run hostname and see if the result matches your input. To connect with SSH, I configured the pi with a hostname of hyperion4516 and a default username of ubuntu . Note For debugging the IP of your pi, I recommend using Advanced IP Scanner . Look for an ubuntu username and copy the IP. You can use ssh ip_address to connect as as well. Connecting with SSH Using OpenSSH (on any OS, really) you can connect to the Pi with: 1 ssh ubuntu@hyperion4516 # username@hostname It will prompt you for the password, which is hyperion4516 . Note You can also use PuTTY , which might actually be a better solution. It has easy configs but an ugly command line (But you can fix that). It makes gui forwarding very easy. Installing ROS From the SSH client connected to the server, you can then follow the installation guide for ROS Noetic . Install ros-noetic-desktop-full for all the packages you need. Make sure to properly configure and source your .bashrc file for use in ROS with these commands: 1 2 echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc # It will automatically source now Also, actually follow this guide on confirming setup and making a sample workspace (that I didn't follow the first time). Each time you need to access packages in your workspace, run these commands: 1 2 3 cd ~/catkin_ws # go to the workspace catkin_make # build the packages source devel/setup.bash # make sure the CLI knows about them I believe doing . ~/catkin_ws/devel/setup.bash does the exact same thing as the last line in the snippet above. Both add the workspace to the ROS Environment. To confirm, run 1 echo $ROS_PACKAGE_PATH # the ws directory should be included Some useful ROS commands are: 1 2 3 roscd <package> # go to package directory rosls <package> # list the subdirectories and files in package rosed <package> <file> # edit package file with Vim Using Byobu Once you are done with the basic setup, I would recommend running byobu to activate a window switching command line thing. It helps with ROS stuff. Some simple hotkeys are: F2 : to create a new window F3, F4 : To switch between active windows Shift + F6 : To close active window Here is a cheatsheet with most of the comands. The setup should be all done!","title":"ROS Installation & Setup"},{"location":"rossetup/#ros-installation-and-setup","text":"","title":"ROS Installation and Setup"},{"location":"rossetup/#materials","text":"Raspberry Pi 4 Sandisk microSD card (32 GB) microHDMI (A-M) Keyboard (and mouse, maybe) Ethernet for the Pi to facilitate the installation","title":"Materials"},{"location":"rossetup/#installing-the-os","text":"First, install the Raspberry Pi Imager . Open it and choose an OS, in my case Ubuntu Server 20.04. I'm using the server distro since in the final product we won't need a desktop or an guis for that matter. Make sure to choose the 64-bit distro. Before imaging, make sure your microSD is connected to your computer. Once ubuntu is installed, put the microSD into the Pi, plug in the ethernet (or use normal WiFi ). On your first boot, connect an HDMI and keyboard (no mouse needed) to access the command line. Once you are in, run sudo apt update and sudo apt upgrade to make sure everything is up to date and test your network connection. Once you see everything works, you need to set your static hostname so you don't have to connect with IP using ssh. 1 2 3 hostnamectl set-hostname <your_hostname> # ex hostnamectl set-hostname hello_world To verify everything works, run hostname and see if the result matches your input. To connect with SSH, I configured the pi with a hostname of hyperion4516 and a default username of ubuntu . Note For debugging the IP of your pi, I recommend using Advanced IP Scanner . Look for an ubuntu username and copy the IP. You can use ssh ip_address to connect as as well.","title":"Installing the OS"},{"location":"rossetup/#connecting-with-ssh","text":"Using OpenSSH (on any OS, really) you can connect to the Pi with: 1 ssh ubuntu@hyperion4516 # username@hostname It will prompt you for the password, which is hyperion4516 . Note You can also use PuTTY , which might actually be a better solution. It has easy configs but an ugly command line (But you can fix that). It makes gui forwarding very easy.","title":"Connecting with SSH"},{"location":"rossetup/#installing-ros","text":"From the SSH client connected to the server, you can then follow the installation guide for ROS Noetic . Install ros-noetic-desktop-full for all the packages you need. Make sure to properly configure and source your .bashrc file for use in ROS with these commands: 1 2 echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc # It will automatically source now Also, actually follow this guide on confirming setup and making a sample workspace (that I didn't follow the first time). Each time you need to access packages in your workspace, run these commands: 1 2 3 cd ~/catkin_ws # go to the workspace catkin_make # build the packages source devel/setup.bash # make sure the CLI knows about them I believe doing . ~/catkin_ws/devel/setup.bash does the exact same thing as the last line in the snippet above. Both add the workspace to the ROS Environment. To confirm, run 1 echo $ROS_PACKAGE_PATH # the ws directory should be included Some useful ROS commands are: 1 2 3 roscd <package> # go to package directory rosls <package> # list the subdirectories and files in package rosed <package> <file> # edit package file with Vim","title":"Installing ROS"},{"location":"rossetup/#using-byobu","text":"Once you are done with the basic setup, I would recommend running byobu to activate a window switching command line thing. It helps with ROS stuff. Some simple hotkeys are: F2 : to create a new window F3, F4 : To switch between active windows Shift + F6 : To close active window Here is a cheatsheet with most of the comands. The setup should be all done!","title":"Using Byobu"}]}